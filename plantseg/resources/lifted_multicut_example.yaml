# Contains the path to the directory or file to process
path: MY_DATA_DIR

preprocessing:
  # enable/disable preprocessing
  state: True
  # crop the volume if necessary
  crop_volume: "[:, :, :]"
  # create a new sub folder where all results will be stored
  save_directory: "PreProcessing"
  # rescaling the volume is essential for the generalization of the networks. The rescaling factor can be computed as the resolution
  # of the volume at hand divided by the resolution of the dataset used in training. Be careful, if the difference is too large check for a different model.
  factor: [1.0, 1.0, 1.0]
  # the order of the spline interpolation
  order: 2
  # optional: perform Gaussian smoothing or median filtering on the input.
  filter:
    # enable/disable filtering
    state: False
    # Accepted values: 'gaussian'/'median'
    type: gaussian
    # sigma (gaussian) or disc radius (median)
    filter_param: 1.0

cnn_prediction:
  # enable/disable UNet prediction
  state: True
  # Trained model name, more info on available models and custom models in the README
  model_name: "generic_light_sheet_3d_unet"
  # If a CUDA capable gpu is available and corrected setup use "cuda", if not you can use "cpu" for cpu only inference (slower)
  device: "cuda"
  # patch size given to the network (adapt to fit in your GPU mem)
  patch: [64, 128, 128]
  # stride between patches (make sure the the patches overlap in order to get smoother prediction maps)
  stride: "Balanced"
  # "best" refers to best performing on the val set (recommended), alternatively "last" refers to the last version before interruption
  version: best
  # If "True" forces downloading networks for the online repos
  model_update: False

cnn_postprocessing:
  # enable/disable cnn post processing
  state: True
  # if True convert to result to tiff
  tiff: False
  output_type: "data_float32"
  # rescaling factor
  factor: [1, 1, 1]
  # spline order for rescaling
  order: 2
  # save raw input in the output prediction file h5 file
  save_raw: False


segmentation:
  # enable/disable segmentation
  state: True
  # path to the directory containing the nuclei predictions (either probability maps or segmentation)
  nuclei_predictions_path: PATH_TO_NUCLEI_PREDS
  # whether the `nuclei_predictions_path` contains the probability maps (is_segmentation=False) or segmentation (is_segmentation=True)
  is_segmentation: False
  # Name of the algorithm to use for inferences
  name: "LiftedMulticut"
  # Segmentation specific parameters here
  # balance under-/over-segmentation; 0 - aim for undersegmentation, 1 - aim for oversegmentation
  beta: 0.65
  # directory where to save the results
  save_directory: "LiftedMulticut"
  # enable/disable watershed
  run_ws: True
  # use 2D instead of 3D watershed
  ws_2D: False
  # probability maps threshold
  ws_threshold: 0.4
  # set the minimum superpixels size
  ws_minsize: 50
  # sigma for the gaussian smoothing of the distance transform
  ws_sigma: 2.0
  # sigma for the gaussian smoothing of boundary
  ws_w_sigma: 0
  # set the minimum segment size in the final segmentation
  post_minsize: 100

segmentation_postprocessing:
  # enable/disable segmentation post processing
  state: True
  # if True convert to result to tiff
  tiff: False
  # rescaling factor
  factor: [1, 1, 1]
  # spline order for rescaling (keep 0 for segmentation post processing
  order: 0
  # save raw input in the output segmentation file h5 file
  save_raw: False



